openapi: 3.0.3
info:
  title: HW
  description: HW
  version: 1.0.0
paths:
  /api/v1/products:
    get:
      tags:
        - Products
      summary: List products
      description: Update an existing pet by Id
      operationId: listProducts
      parameters:
          - $ref: "#/components/parameters/Capability"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                description: Dependant on the `Capability` header
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  - type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/Product"
                        - $ref: "#/components/schemas/PricingCapability"
  /api/v1/products/{id}:
    get:
      tags:
        - Products
      summary: Get product detail
      description: Get product detail by id
      operationId: productDetail
      parameters:
        - name: id
          in: path
          required: true
          description: ID of product
          schema:
            type: string
        - $ref: '#/components/parameters/Capability'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                description: Dependant on the `Capability` header
                oneOf:
                  - $ref: '#/components/schemas/Product'
                  - allOf:
                      - $ref: "#/components/schemas/Product"
                      - $ref: "#/components/schemas/PricingCapability"
        '400':
          $ref: "#/components/responses/ValidationError"
  /api/v1/availability:
    post:
      tags:
        - Availability
      summary: Filter availability
      description: |
        The API should be able to generate  ~1 year of availabilities: today + 365 days. You can return just an empty array for dates outside of this range.
        
        When the availability.vacancies drop to 0, the status will become SOLD_OUT and available flag will become false
      parameters:
          - $ref: "#/components/parameters/Capability"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/AvailabilityRequest"
                - $ref: "#/components/schemas/AvailabilityRangeRequest"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                description: Dependant on the `Capability` header
                oneOf:
                  - $ref: "#/components/schemas/Availability"
                  - allOf:
                      - $ref: "#/components/schemas/Availability"
                      - $ref: "#/components/schemas/PricingCapability"
        '400':
          $ref: "#/components/responses/ValidationError"
  /api/v1/bookings:
    post:
      tags:
        - Booking
      summary: Create booking
      description: |
        This endpoint will create a reservation. When a booking is created, the `availability.vacancies` has to be lowered by the amount of units provided in the body.
        If the provided availability doesn’t have enough vacancies, the reservation creation cannot proceed. 
        Reservation must have status `RESERVED` and there won’t be any tickets.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookingRequest"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                description: Dependant on the `Capability` header
                oneOf:
                  - $ref: "#/components/schemas/Booking"
                  - allOf:
                      - $ref: "#/components/schemas/Booking"
                      - $ref: "#/components/schemas/PricingCapability"
        '400':
          $ref: "#/components/responses/ValidationError"
  /api/v1/bookings/{id}:
    get:
      tags:
        - Booking
      summary: Booking detail
      parameters:
        - name: id
          in: path
          required: true
          description: ID of booking
          schema:
            type: string
        - $ref: "#/components/parameters/Capability"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                description: Dependant on the `Capability` header
                oneOf:
                  - $ref: "#/components/schemas/Booking"
                  - allOf:
                      - $ref: "#/components/schemas/Booking"
                      - $ref: "#/components/schemas/PricingCapability"
        '400':
          $ref: "#/components/responses/ValidationError"
  /api/v1/bookings/{id}/confirm:
    post:
      tags:
        - Booking
      summary: Confirm booking
      description: |
        Confirmed Booking must have the status `CONFIRMED` and there have to be `tickets` generated.
        It’s fine if the `ticket` is represented by a randomly generated string.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of booking
          schema:
            type: string
        - $ref: "#/components/parameters/Capability"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                description: Dependant on the `Capability` header
                oneOf:
                  - $ref: "#/components/schemas/Booking"
                  - allOf:
                      - $ref: "#/components/schemas/Booking"
                      - $ref: "#/components/schemas/PricingCapability"
        '400':
          $ref: "#/components/responses/ValidationError"

components:
  schemas:
    Product:
      description: Product represents a simple product in the system that can be booked.
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        capacity:
          type: integer
          description: represents max number of vacancies per 1 day (availability)
    Availability:
      description: Availability represents whether is a product available on a certain day.
      type: object
      properties:
        id:
          type: string
        localDate:
          type: string
          format: date-time
          pattern: yyyy-MM-dd
        status:
          type: string
          enum:
            - AVAILABLE
            - SOLD_OUT
        vacancies:
          type: integer
          description: number of vacancies that's available to book
        available:
          type: boolean
    AvailabilityRequest:
      type: object
      properties:
        productId:
          type: string
        localDate:
          type: string
          format: date-time
          pattern: yyyy-MM-dd
    AvailabilityRangeRequest:
      type: object
      properties:
        productId:
          type: string
        localDateStart:
          type: string
          format: date-time
          pattern: yyyy-MM-dd
        localDateEnd:
          type: string
          format: date-time
          pattern: yyyy-MM-dd
    Booking:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          enum:
            - RESERVED
            - CONFIRMED
        productId:
          type: string
        availabilityId:
          type: string
        units:
          type: array
          items:
            $ref: "#/components/schemas/BookingUnit"
    BookingUnit:
      type: object
      properties:
        id:
          type: string
        ticket:
          type: string
          nullable: true
          description: when Booking is CONFIRMED, generate a ticket (some random string), otherwise null
    BookingRequest:
      type: object
      properties:
        productId:
          type: string
        availabilityId:
          type: string
        units:
          description: represents a number of customers on this Booking
          type: integer
    PricingCapability:
      type: object
      properties:
        price:
          type: integer
          description: 1000 represents 10.0 EUR, price of single unit
        currency:
          type: string
          description: ISO 4217
          example: EUR
    ProblemDetail:
      title: RFC 7807
      description: https://datatracker.ietf.org/doc/html/rfc7807
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        invalid-params:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              reason:
                type: string

  parameters:
    Capability:
      name: Capability
      in: header
      required: false
      description: Extends objects with additional properties
      schema:
        type: string
        enum:
          - pricing
  responses:
    ValidationError:
      description: 'Validation error'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"
